ARG NODE_VERSION=18.18.0
ARG PROJECT=user-app
# Alpine base with necessary dependencies
FROM node:${NODE_VERSION}-alpine AS alpine
RUN apk update
RUN apk add --no-cache libc6-compat 

# Setup pnpm and turbo on the alpine base
FROM alpine as base
RUN npm install pnpm@10.11.0 turbo@2.5.3 --global
RUN pnpm config set store-dir ~/.pnpm-store

# Prune projects
FROM base AS pruner
ARG PROJECT

WORKDIR /app
COPY . .
RUN turbo prune --scope=${PROJECT} --docker

# Build the project
FROM base AS builder
ARG PROJECT

WORKDIR /app

# Copy lockfile and package.json's of isolated subworkspace
COPY --from=pruner /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=pruner /app/out/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --from=pruner /app/out/json/ .

# First install the dependencies (as they change less often)
RUN --mount=type=cache,id=pnpm,target=~/.pnpm-store pnpm install --frozen-lockfile

# Copy source code of isolated subworkspace
COPY --from=pruner /app/out/full/ .
#this is neccarry 
RUN cd packages/db && \
  pnpm prisma generate --schema=./prisma/schema.prisma
RUN turbo build --filter=${PROJECT}
# Clean and regenerate with explicit binary target

RUN --mount=type=cache,id=pnpm,target=~/.pnpm-store pnpm prune --prod --no-optional

FROM alpine AS runner
ARG PROJECT

WORKDIR /app
# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder --chown=nextjs:nodejs /app/apps/${PROJECT}/.next/standalone ./next/standalone
COPY --from=builder --chown=nextjs:nodejs /app/apps/${PROJECT}/.next/static ./next/standalone/apps/${PROJECT}/.next/static
COPY --from=builder --chown=nextjs:nodejs /app/apps/${PROJECT}/public ./next/standalone/apps/${PROJECT}/public
##prisma was looking for this and couldn't find and claude.ai helped me to find it 
COPY --from=builder --chown=nextjs:nodejs /app/packages/db/generated ./next/standalone/apps/${PROJECT}/generated
USER nextjs

EXPOSE 3000
ENV PORT=3000

ENV HOSTNAME="0.0.0.0"
CMD ["node", "next/standalone/apps/user-app/server.js"]
